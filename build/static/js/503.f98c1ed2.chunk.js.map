{"version":3,"file":"static/js/503.f98c1ed2.chunk.js","mappings":"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","sources":["Pages/Auth/Headerauth/Headerauth.js","Pages/Auth/Mobileverification/Mobileverification.js","webpack://acadify_saas_frontend/./src/Shared/Button/style.module.scss?ba54","Shared/Button/Button.jsx","webpack://acadify_saas_frontend/./src/Shared/InputField/style.module.scss?5e45","Shared/InputField/InputField.jsx","Shared/InputField/index.js","../node_modules/src/index.tsx"],"sourcesContent":["import React from \"react\";\nimport \"./Headerauth.scss\";\nimport { useHistory } from \"react-router-dom\";\n\nfunction Headerauth() {\n  let history = useHistory();\n  return (\n    <div className=\"col-sm-12 px-md-5 \">\n      <div className=\"row\">\n        <div className=\"col-md-6\">\n          <img\n            src=\"../images/plexar/plexaarlogo.png\"\n            className=\"img-fluid plexar_logo\"\n          />\n        </div>\n        <div className=\"col-md-6 text-right m-auto\">\n          <span className=\"color_font_one\">Already have account?</span>\n          <button className=\"btn btn-primary rounded-pill login_button_style\">\n            Login\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Headerauth;\n","import React, { useState } from \"react\";\r\nimport { Form, FormikProvider, useFormik } from \"formik\";\r\nimport { Link, useHistory, useParams } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport * as Yup from \"yup\";\r\nimport { loginUser, resendprimaryotpmobile, verifymobileotp } from \"../../../Store/Auth/actions\";\r\nimport Button from \"../../../Shared/Button/Button\";\r\nimport InputField from \"../../../Shared/InputField\";\r\nimport Headerauth from \"../Headerauth/Headerauth\";\r\nimport \"../Login/Login.scss\";\r\nimport OtpInput from \"react-otp-input\";\r\nimport { useEffect } from \"react\";\r\n\r\nexport default function Mobilrverfication(props) {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [otp, setOtp] = useState(\"\");\r\n  const [isVisible, setVisible] = useState(false);\r\n  const [usernumber, setUsernumber] = useState(\"\");\r\n  const [isActive, setIsActive] = useState(false);\r\n  const [isLoadingresend, setIsLoadingresend] = useState(false);\r\n  const [time, setTime] = useState(110); // Initial time in seconds\r\n  const userphone = useSelector(\r\n    (state) => state.Auth?.mobilenumberreducer.mobileNumber\r\n  );\r\n  const userid = useSelector((state) => state.Auth?.registersuccessId);\r\n  console.log(\"user-------->>>>>>\", userid);\r\n  useEffect(() => {\r\n    setUsernumber(userphone);\r\n  }, []);\r\n\r\n  const dispatch = useDispatch();\r\n  let history = useHistory();\r\n  let { number } = useParams();\r\n  console.log(\"search params\", number);\r\n  const toggle = () => {\r\n    setVisible(!isVisible);\r\n  };\r\n\r\n  //////////////////////\r\n\r\n  useEffect(() => {\r\n    let interval = null;\r\n\r\n    if (isActive) {\r\n      interval = setInterval(() => {\r\n        setTime((prevTime) => {\r\n          if (prevTime === 0) {\r\n            clearInterval(interval);\r\n            setIsActive(false);\r\n            return 110; // Reset the time to 1 minute 50 seconds\r\n          } else {\r\n            return prevTime - 1;\r\n          }\r\n        });\r\n      }, 1000);\r\n    } else {\r\n      clearInterval(interval);\r\n    }\r\n\r\n    // Clean up the interval on component unmount\r\n    return () => clearInterval(interval);\r\n  }, [isActive]);\r\n\r\n\r\n  \r\n  const formatTime = () => {\r\n    const minutes = Math.floor(time / 60);\r\n    const seconds = time % 60;\r\n\r\n    const formattedMinutes = String(minutes).padStart(2, '0');\r\n    const formattedSeconds = String(seconds).padStart(2, '0');\r\n\r\n    return `${formattedMinutes}:${formattedSeconds}`;\r\n  };\r\n\r\n  /////////////////////\r\n  const handleSubmit = () => {\r\n    dispatch(\r\n      verifymobileotp({\r\n        otpCode: otp,\r\n        phone: userphone,\r\n        userId: userid,\r\n        setIsLoading,\r\n      })\r\n    );\r\n  };\r\n  const resendotponcallprimarymobile = () =>{\r\n    console.log(\"function ====?>\")\r\n    dispatch(\r\n      resendprimaryotpmobile({\r\n        id: userid,\r\n        type: 1,\r\n        setIsActive,\r\n        setIsLoadingresend,\r\n      })\r\n    );\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"col-sm-12 px-0 height_page\">\r\n      <div className=\"col-sm-12 padding_top_bottom_equal\">\r\n        <Headerauth />\r\n      </div>\r\n      <div className=\"col-md-12 \">\r\n        <div className=\"col-md-12 px-5\">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-3 background_plexar text-center  d-flex align-items-center  justify-content-center\">\r\n              <img\r\n                className=\"img-fluid img_plexar_width\"\r\n                src=\"../images/plexar/plexar.png\"\r\n              />\r\n            </div>\r\n            <div className=\"col-md-9 border_welcome_to_plexar text-center \">\r\n              <div className=\"col-md-12 alignment_vertically\">\r\n                <h2>\r\n                  <b>\r\n                    Mobile <span className=\"plexar_font\">Verification</span>\r\n                  </b>\r\n                </h2>\r\n\r\n                <p className=\"sub_heading mb-0\">\r\n                  Entered the code that was sent to\r\n                </p>\r\n                <p className=\"sub_heading mb-0\">\r\n                  <b>{usernumber}</b>{\" \"}\r\n                </p>\r\n                <p className=\"sub_heading1\">{number}</p>\r\n                <div className=\"col-md-12\">\r\n                  <div className=\"row\">\r\n                    <div className=\"col-md-4\"></div>\r\n                    <div className=\"col-md-4 pt-3\">\r\n                      <OtpInput\r\n                        value={otp}\r\n                        onChange={setOtp}\r\n                        className=\"input_style\"\r\n                        numInputs={6}\r\n                        renderSeparator={<span>&nbsp;&nbsp;&nbsp;</span>}\r\n                        renderInput={(props) => <input {...props} />}\r\n                      />\r\n                      <div className=\"col-md-12 text-center\">\r\n                        <p className=\"mb-1 pt-3 having_problrm\">\r\n                          Having problem?\r\n                        </p>\r\n                        {isActive?  <p className=\"mb-0 resend_button_disabled\"  >Resend Code</p> :  <p className=\"mb-0 resend_button\" onClick={resendotponcallprimarymobile} >Resend Code</p> }\r\n                        {isLoadingresend ? (\r\n                              <div\r\n                                class=\"spinner-border spinner-sm text-primary\"\r\n                                role=\"status\"\r\n                              >\r\n                                <span class=\"sr-only\">Loading...</span>\r\n                              </div>\r\n                            ) : (\r\n                             null\r\n                            )}\r\n                       \r\n                       <p className=\" having_problrm\"> {isActive ? <div>{formatTime()}</div> : null } </p>\r\n                      </div>\r\n                      <div className=\"col-md-12 px-0 \">\r\n                        <button\r\n                          onClick={handleSubmit}\r\n                          className=\"btn btn-primary button_width btn-lg\"\r\n                        >\r\n                        {isLoading ? (\r\n                              <div\r\n                                class=\"spinner-border text-light\"\r\n                                role=\"status\"\r\n                              >\r\n                                <span class=\"sr-only\">Loading...</span>\r\n                              </div>\r\n                            ) : (\r\n                              <>Verify Now</>\r\n                            )}\r\n                        </button>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"col-md-4\"></div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"col-md-12 bottom_attach \">\r\n                <hr />\r\n                <p className=\"sub_heading\">\r\n                  Terms & Conditions. Privacy Policy. Copyright. Cookies Policy.\r\n                  Help\r\n                </p>\r\n                <p className=\"sub_heading\">&copy; Selteq Ltd.</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"btnDesign\":\"style_btnDesign__SmFZj\"};","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classNames from \"classnames\";\nimport styles from \"./style.module.scss\";\n\nexport default function Button(props) {\n  const {\n    className,\n    onHandleClick,\n    children,\n    variant,\n    color,\n    type,\n    size,\n    shape,\n    isLoading,\n    ...rest\n  } = props;\n\n  const styleClass = classNames(\n    `btn ${styles.btnDesign}`,\n    variant ? `btn-${variant}-${color}` : `btn-${color}`,\n    { [`btn-${size}`]: size },\n    shape,\n    className\n  );\n\n  return (\n    <button\n      className={styleClass}\n      type={type}\n      disabled={isLoading}\n      onClick={onHandleClick}\n      {...rest}\n    >\n      {isLoading ? <div class=\"spinner-border\" role=\"status\" /> : children}\n    </button>\n  );\n}\n\nButton.propTypes = {\n  className: PropTypes.string,\n  onHandleClick: PropTypes.func,\n  children: PropTypes.node.isRequired,\n  color: PropTypes.string,\n  shape: PropTypes.string,\n  isLoading: PropTypes.bool,\n  size: PropTypes.oneOf([\"sm\", \"lg\"]),\n  type: PropTypes.oneOf([\"button\", \"submit\", \"reset\"]),\n  variant: PropTypes.oneOf([\"outline\", \"ghost\"]),\n};\nButton.defaultProps = {\n  className: \"\",\n  variant: null,\n  size: null,\n  isLoading: false,\n  onHandleClick: () => {},\n  color: \"primary\",\n  type: \"button\",\n  shape: \"rounded-1\",\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"inputFormDiv\":\"style_inputFormDiv__YOxui\",\"inputDesign\":\"style_inputDesign__QioYv\",\"errorMessage\":\"style_errorMessage__exT93\"};","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Text from \"../Text\";\nimport styles from \"./style.module.scss\";\n\nexport default function InputField(props) {\n  const {\n    placeholder,\n    type,\n    onHandleChange,\n    value,\n    name,\n    className,\n    error,\n    disabled,\n    helpertext,\n    inputFormDiv,\n  } = props;\n\n  return (\n    <div className={`${styles.inputFormDiv} ${inputFormDiv}`}>\n      <input\n        type={type}\n        placeholder={placeholder}\n        name={name}\n        className={`${styles.inputDesign} ${className}`}\n        disabled={disabled}\n        onChange={onHandleChange}\n        value={value}\n      />\n      {error ? <Text className={styles.errorMessage}>{helpertext}</Text> : null}\n    </div>\n  );\n}\n\nInputField.propTypes = {\n  placeholder: PropTypes.string.isRequired,\n  className: PropTypes.string,\n  inputFormDiv: PropTypes.string,\n  disabled: PropTypes.bool,\n  helpertext: PropTypes.string,\n  error: PropTypes.bool,\n  onHandleChange: PropTypes.func,\n  type: PropTypes.string,\n  value: PropTypes.string,\n  name: PropTypes.string,\n};\n\nInputField.defaultProps = {\n  placeholder: \"\",\n  type: \"\",\n  value: \"\",\n  name: \"\",\n  inputFormDiv: \"\",\n  onHandleChange: () => {},\n  className: null,\n  disabled: null,\n  helpertext: null,\n  error: true,\n};\n","import InputField from \"./InputField\";\n\nexport default InputField;\n","import React from 'react';\n\ntype AllowedInputTypes = 'password' | 'text' | 'number' | 'tel';\n\ntype InputProps = Required<\n  Pick<\n    React.InputHTMLAttributes<HTMLInputElement>,\n    | 'value'\n    | 'onChange'\n    | 'onFocus'\n    | 'onBlur'\n    | 'onKeyDown'\n    | 'onPaste'\n    | 'aria-label'\n    | 'maxLength'\n    | 'autoComplete'\n    | 'style'\n  > & {\n    ref: React.RefCallback<HTMLInputElement>;\n    placeholder: string | undefined;\n    className: string | undefined;\n    type: AllowedInputTypes;\n  }\n>;\n\ninterface OTPInputProps {\n  /** Value of the OTP input */\n  value?: string;\n  /** Number of OTP inputs to be rendered */\n  numInputs?: number;\n  /** Callback to be called when the OTP value changes */\n  onChange: (otp: string) => void;\n  /** Function to render the input */\n  renderInput: (inputProps: InputProps, index: number) => React.ReactNode;\n  /** Whether the first input should be auto focused */\n  shouldAutoFocus?: boolean;\n  /** Placeholder for the inputs */\n  placeholder?: string;\n  /** Function to render the separator */\n  renderSeparator?: ((index: number) => React.ReactNode) | React.ReactNode;\n  /** Style for the container */\n  containerStyle?: React.CSSProperties | string;\n  /** Style for the input */\n  inputStyle?: React.CSSProperties | string;\n  /** The type that will be passed to the input being rendered */\n  inputType?: AllowedInputTypes;\n}\n\nconst isStyleObject = (obj: unknown) => typeof obj === 'object' && obj !== null;\n\nconst OTPInput = ({\n  value = '',\n  numInputs = 4,\n  onChange,\n  renderInput,\n  shouldAutoFocus = false,\n  inputType = 'text',\n  renderSeparator,\n  placeholder,\n  containerStyle,\n  inputStyle,\n}: OTPInputProps) => {\n  const [activeInput, setActiveInput] = React.useState(0);\n  const inputRefs = React.useRef<Array<HTMLInputElement | null>>([]);\n\n  const getOTPValue = () => (value ? value.toString().split('') : []);\n\n  const isInputNum = inputType === 'number' || inputType === 'tel';\n\n  React.useEffect(() => {\n    inputRefs.current = inputRefs.current.slice(0, numInputs);\n  }, [numInputs]);\n\n  React.useEffect(() => {\n    if (shouldAutoFocus) {\n      inputRefs.current[0]?.focus();\n    }\n  }, [shouldAutoFocus]);\n\n  const getPlaceholderValue = () => {\n    if (typeof placeholder === 'string') {\n      if (placeholder.length === numInputs) {\n        return placeholder;\n      }\n\n      if (placeholder.length > 0) {\n        console.error('Length of the placeholder should be equal to the number of inputs.');\n      }\n    }\n    return undefined;\n  };\n\n  const isInputValueValid = (value: string) => {\n    const isTypeValid = isInputNum ? !isNaN(Number(value)) : typeof value === 'string';\n    return isTypeValid && value.trim().length === 1;\n  };\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    if (isInputValueValid(value)) {\n      changeCodeAtFocus(value);\n      focusInput(activeInput + 1);\n    } else {\n      const { nativeEvent } = event;\n      // @ts-expect-error - This was added previosly to handle and edge case\n      // for dealing with keyCode \"229 Unidentified\" on Android. Check if this is\n      // still needed.\n      if (nativeEvent.data === null && nativeEvent.inputType === 'deleteContentBackward') {\n        event.preventDefault();\n        changeCodeAtFocus('');\n        focusInput(activeInput - 1);\n      }\n    }\n  };\n\n  const handleFocus = (event: React.FocusEvent<HTMLInputElement>) => (index: number) => {\n    setActiveInput(index);\n    event.target.select();\n  };\n\n  const handleBlur = () => {\n    setActiveInput(activeInput - 1);\n  };\n\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    const otp = getOTPValue();\n    if ([event.code, event.key].includes('Backspace')) {\n      event.preventDefault();\n      changeCodeAtFocus('');\n      focusInput(activeInput - 1);\n    } else if (event.code === 'Delete') {\n      event.preventDefault();\n      changeCodeAtFocus('');\n    } else if (event.code === 'ArrowLeft') {\n      event.preventDefault();\n      focusInput(activeInput - 1);\n    } else if (event.code === 'ArrowRight') {\n      event.preventDefault();\n      focusInput(activeInput + 1);\n    }\n    // React does not trigger onChange when the same value is entered\n    // again. So we need to focus the next input manually in this case.\n    else if (event.key === otp[activeInput]) {\n      event.preventDefault();\n      focusInput(activeInput + 1);\n    } else if (\n      event.code === 'Spacebar' ||\n      event.code === 'Space' ||\n      event.code === 'ArrowUp' ||\n      event.code === 'ArrowDown'\n    ) {\n      event.preventDefault();\n    } else if (isInputNum && !isInputValueValid(event.key)) {\n      event.preventDefault();\n    }\n  };\n\n  const focusInput = (index: number) => {\n    const activeInput = Math.max(Math.min(numInputs - 1, index), 0);\n\n    if (inputRefs.current[activeInput]) {\n      inputRefs.current[activeInput]?.focus();\n      inputRefs.current[activeInput]?.select();\n      setActiveInput(activeInput);\n    }\n  };\n\n  const changeCodeAtFocus = (value: string) => {\n    const otp = getOTPValue();\n    otp[activeInput] = value[0];\n    handleOTPChange(otp);\n  };\n\n  const handleOTPChange = (otp: Array<string>) => {\n    const otpValue = otp.join('');\n    onChange(otpValue);\n  };\n\n  const handlePaste = (event: React.ClipboardEvent<HTMLInputElement>) => {\n    event.preventDefault();\n\n    const otp = getOTPValue();\n    let nextActiveInput = activeInput;\n\n    // Get pastedData in an array of max size (num of inputs - current position)\n    const pastedData = event.clipboardData\n      .getData('text/plain')\n      .slice(0, numInputs - activeInput)\n      .split('');\n\n    // Prevent pasting if the clipboard data contains non-numeric values for number inputs\n    if (isInputNum && pastedData.some((value) => isNaN(Number(value)))) {\n      return;\n    }\n\n    // Paste data from focused input onwards\n    for (let pos = 0; pos < numInputs; ++pos) {\n      if (pos >= activeInput && pastedData.length > 0) {\n        otp[pos] = pastedData.shift() ?? '';\n        nextActiveInput++;\n      }\n    }\n\n    focusInput(nextActiveInput);\n    handleOTPChange(otp);\n  };\n\n  return (\n    <div\n      style={Object.assign({ display: 'flex', alignItems: 'center' }, isStyleObject(containerStyle) && containerStyle)}\n      className={typeof containerStyle === 'string' ? containerStyle : undefined}\n    >\n      {Array.from({ length: numInputs }, (_, index) => index).map((index) => (\n        <React.Fragment key={index}>\n          {renderInput(\n            {\n              value: getOTPValue()[index] ?? '',\n              placeholder: getPlaceholderValue()?.[index] ?? undefined,\n              ref: (element) => (inputRefs.current[index] = element),\n              onChange: handleChange,\n              onFocus: (event) => handleFocus(event)(index),\n              onBlur: handleBlur,\n              onKeyDown: handleKeyDown,\n              onPaste: handlePaste,\n              autoComplete: 'off',\n              maxLength: 1,\n              'aria-label': `Please enter OTP character ${index + 1}`,\n              style: Object.assign(\n                { width: '1em', textAlign: 'center' } as const,\n                isStyleObject(inputStyle) && inputStyle\n              ),\n              className: typeof inputStyle === 'string' ? inputStyle : undefined,\n              type: inputType,\n            },\n            index\n          )}\n          {index < numInputs - 1 && (typeof renderSeparator === 'function' ? renderSeparator(index) : renderSeparator)}\n        </React.Fragment>\n      ))}\n    </div>\n  );\n};\n\nexport default OTPInput;\n"],"names":["useHistory","className","src","Mobilrverfication","props","useState","isLoading","setIsLoading","otp","setOtp","usernumber","setUsernumber","isActive","setIsActive","isLoadingresend","setIsLoadingresend","time","setTime","userphone","useSelector","state","Auth","mobilenumberreducer","mobileNumber","userid","registersuccessId","console","log","useEffect","dispatch","useDispatch","number","useParams","interval","setInterval","prevTime","clearInterval","value","onChange","numInputs","renderSeparator","renderInput","onClick","resendprimaryotpmobile","id","type","class","role","minutes","Math","floor","seconds","formattedMinutes","String","padStart","formattedSeconds","formatTime","verifymobileotp","otpCode","phone","userId","Button","onHandleClick","children","variant","color","size","shape","rest","styleClass","classNames","styles","disabled","defaultProps","InputField","placeholder","onHandleChange","name","error","helpertext","inputFormDiv","Text","isStyleObject","obj","OTPInput","shouldAutoFocus","inputType","containerStyle","inputStyle","activeInput","setActiveInput","inputRefs","getOTPValue","toString","split","isInputNum","current","slice","focus","getPlaceholderValue","length","isInputValueValid","isNaN","Number","trim","handleChange","event","target","changeCodeAtFocus","focusInput","nativeEvent","data","preventDefault","handleBlur","handleKeyDown","code","key","includes","index","max","min","select","handleOTPChange","otpValue","join","handlePaste","nextActiveInput","pastedData","clipboardData","getData","some","pos","shift","style","Object","assign","display","alignItems","undefined","Array","from","_","map","ref","element","onFocus","handleFocus","onBlur","onKeyDown","onPaste","autoComplete","maxLength","width","textAlign"],"sourceRoot":""}